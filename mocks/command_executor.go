// Code generated by MockGen. DO NOT EDIT.
// Source: tmux_wrapper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICommandExecutor is a mock of ICommandExecutor interface.
type MockICommandExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockICommandExecutorMockRecorder
}

// MockICommandExecutorMockRecorder is the mock recorder for MockICommandExecutor.
type MockICommandExecutorMockRecorder struct {
	mock *MockICommandExecutor
}

// NewMockICommandExecutor creates a new mock instance.
func NewMockICommandExecutor(ctrl *gomock.Controller) *MockICommandExecutor {
	mock := &MockICommandExecutor{ctrl: ctrl}
	mock.recorder = &MockICommandExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommandExecutor) EXPECT() *MockICommandExecutorMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockICommandExecutor) Execute(name string, args ...string) (string, string, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Execute indicates an expected call of Execute.
func (mr *MockICommandExecutorMockRecorder) Execute(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockICommandExecutor)(nil).Execute), varargs...)
}
